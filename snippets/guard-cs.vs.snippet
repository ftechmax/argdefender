<?xml version="1.0" encoding="utf-8" standalone="no"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.False()</Title>
      <Shortcut>gfalse</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).False()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().False()</Title>
      <Shortcut>gxfalse</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().False()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.True()</Title>
      <Shortcut>gtrue</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).True()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().True()</Title>
      <Shortcut>gxtrue</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().True()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Contains(item)</Title>
      <Shortcut>gcon</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>item</ID>
          <Default>item</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Contains($item$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Contains(item)</Title>
      <Shortcut>gxcon</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>item</ID>
          <Default>item</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Contains($item$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Contains(item, comparer)</Title>
      <Shortcut>gconc</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>item</ID>
          <Default>item</Default>
        </Literal>
        <Literal>
          <ID>comparer</ID>
          <Default>comparer</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Contains($item$, $comparer$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Contains(item, comparer)</Title>
      <Shortcut>gxconc</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>item</ID>
          <Default>item</Default>
        </Literal>
        <Literal>
          <ID>comparer</ID>
          <Default>comparer</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Contains($item$, $comparer$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.ContainsNull()</Title>
      <Shortcut>gconn</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).ContainsNull()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().ContainsNull()</Title>
      <Shortcut>gxconn</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().ContainsNull()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Count(count)</Title>
      <Shortcut>gc</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>count</ID>
          <Default>count</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Count($count$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Count(count)</Title>
      <Shortcut>gxc</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>count</ID>
          <Default>count</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Count($count$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.CountInRange(minCount, maxCount)</Title>
      <Shortcut>gcr</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>minCount</ID>
          <Default>minCount</Default>
        </Literal>
        <Literal>
          <ID>maxCount</ID>
          <Default>maxCount</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).CountInRange($minCount$, $maxCount$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().CountInRange(minCount, maxCount)</Title>
      <Shortcut>gxcr</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>minCount</ID>
          <Default>minCount</Default>
        </Literal>
        <Literal>
          <ID>maxCount</ID>
          <Default>maxCount</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().CountInRange($minCount$, $maxCount$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.DoesNotContain(item)</Title>
      <Shortcut>gncon</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>item</ID>
          <Default>item</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).DoesNotContain($item$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().DoesNotContain(item)</Title>
      <Shortcut>gxncon</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>item</ID>
          <Default>item</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().DoesNotContain($item$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.DoesNotContain(item, comparer)</Title>
      <Shortcut>gnconc</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>item</ID>
          <Default>item</Default>
        </Literal>
        <Literal>
          <ID>comparer</ID>
          <Default>comparer</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).DoesNotContain($item$, $comparer$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().DoesNotContain(item, comparer)</Title>
      <Shortcut>gxnconc</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>item</ID>
          <Default>item</Default>
        </Literal>
        <Literal>
          <ID>comparer</ID>
          <Default>comparer</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().DoesNotContain($item$, $comparer$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.DoesNotContainDuplicate()</Title>
      <Shortcut>gncond</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).DoesNotContainDuplicate()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().DoesNotContainDuplicate()</Title>
      <Shortcut>gxncond</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().DoesNotContainDuplicate()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.DoesNotContainNull()</Title>
      <Shortcut>gnconn</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).DoesNotContainNull()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().DoesNotContainNull()</Title>
      <Shortcut>gxnconn</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().DoesNotContainNull()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Empty()</Title>
      <Shortcut>gem</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Empty()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Empty()</Title>
      <Shortcut>gxem</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Empty()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.In(collection)</Title>
      <Shortcut>gin</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>collection</ID>
          <Default>collection</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).In($collection$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().In(collection)</Title>
      <Shortcut>gxin</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>collection</ID>
          <Default>collection</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().In($collection$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.In(collection, comparer)</Title>
      <Shortcut>ginc</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>collection</ID>
          <Default>collection</Default>
        </Literal>
        <Literal>
          <ID>comparer</ID>
          <Default>comparer</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).In($collection$, $comparer$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().In(collection, comparer)</Title>
      <Shortcut>gxinc</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>collection</ID>
          <Default>collection</Default>
        </Literal>
        <Literal>
          <ID>comparer</ID>
          <Default>comparer</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().In($collection$, $comparer$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.MaxCount(maxCount)</Title>
      <Shortcut>gmaxc</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>maxCount</ID>
          <Default>maxCount</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).MaxCount($maxCount$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().MaxCount(maxCount)</Title>
      <Shortcut>gxmaxc</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>maxCount</ID>
          <Default>maxCount</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().MaxCount($maxCount$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.MinCount(minCount)</Title>
      <Shortcut>gminc</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>minCount</ID>
          <Default>minCount</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).MinCount($minCount$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().MinCount(minCount)</Title>
      <Shortcut>gxminc</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>minCount</ID>
          <Default>minCount</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().MinCount($minCount$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotCount(count)</Title>
      <Shortcut>gnc</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>count</ID>
          <Default>count</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotCount($count$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().NotCount(count)</Title>
      <Shortcut>gxnc</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>count</ID>
          <Default>count</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().NotCount($count$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotEmpty()</Title>
      <Shortcut>gnem</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotEmpty()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().NotEmpty()</Title>
      <Shortcut>gxnem</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().NotEmpty()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotIn(collection)</Title>
      <Shortcut>gnin</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>collection</ID>
          <Default>collection</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotIn($collection$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().NotIn(collection)</Title>
      <Shortcut>gxnin</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>collection</ID>
          <Default>collection</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().NotIn($collection$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotIn(collection, comparer)</Title>
      <Shortcut>gninc</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>collection</ID>
          <Default>collection</Default>
        </Literal>
        <Literal>
          <ID>comparer</ID>
          <Default>comparer</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotIn($collection$, $comparer$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().NotIn(collection, comparer)</Title>
      <Shortcut>gxninc</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>collection</ID>
          <Default>collection</Default>
        </Literal>
        <Literal>
          <ID>comparer</ID>
          <Default>comparer</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().NotIn($collection$, $comparer$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.GreaterThan(other)</Title>
      <Shortcut>ggt</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>other</ID>
          <Default>other</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).GreaterThan($other$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().GreaterThan(other)</Title>
      <Shortcut>gxgt</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>other</ID>
          <Default>other</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().GreaterThan($other$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.InRange(minValue, maxValue)</Title>
      <Shortcut>gr</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>minValue</ID>
          <Default>minValue</Default>
        </Literal>
        <Literal>
          <ID>maxValue</ID>
          <Default>maxValue</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).InRange($minValue$, $maxValue$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().InRange(minValue, maxValue)</Title>
      <Shortcut>gxr</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>minValue</ID>
          <Default>minValue</Default>
        </Literal>
        <Literal>
          <ID>maxValue</ID>
          <Default>maxValue</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().InRange($minValue$, $maxValue$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.LessThan(other)</Title>
      <Shortcut>glt</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>other</ID>
          <Default>other</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).LessThan($other$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().LessThan(other)</Title>
      <Shortcut>gxlt</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>other</ID>
          <Default>other</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().LessThan($other$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Max(maxValue)</Title>
      <Shortcut>gmax</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>maxValue</ID>
          <Default>maxValue</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Max($maxValue$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Max(maxValue)</Title>
      <Shortcut>gxmax</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>maxValue</ID>
          <Default>maxValue</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Max($maxValue$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Min(minValue)</Title>
      <Shortcut>gmin</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>minValue</ID>
          <Default>minValue</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Min($minValue$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Min(minValue)</Title>
      <Shortcut>gxmin</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>minValue</ID>
          <Default>minValue</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Min($minValue$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.KindSpecified()</Title>
      <Shortcut>gtks</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).KindSpecified()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().KindSpecified()</Title>
      <Shortcut>gxtks</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().KindSpecified()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.KindUnspecified()</Title>
      <Shortcut>gtku</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).KindUnspecified()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().KindUnspecified()</Title>
      <Shortcut>gxtku</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().KindUnspecified()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Equal(other, delta)</Title>
      <Shortcut>geqd</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>other</ID>
          <Default>other</Default>
        </Literal>
        <Literal>
          <ID>delta</ID>
          <Default>delta</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Equal($other$, $delta$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Equal(other, delta)</Title>
      <Shortcut>gxeqd</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>other</ID>
          <Default>other</Default>
        </Literal>
        <Literal>
          <ID>delta</ID>
          <Default>delta</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Equal($other$, $delta$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Infinity()</Title>
      <Shortcut>ginf</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Infinity()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Infinity()</Title>
      <Shortcut>gxinf</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Infinity()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NaN()</Title>
      <Shortcut>gnan</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NaN()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().NaN()</Title>
      <Shortcut>gxnan</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().NaN()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NegativeInfinity()</Title>
      <Shortcut>gneginf</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NegativeInfinity()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().NegativeInfinity()</Title>
      <Shortcut>gxneginf</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().NegativeInfinity()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotEqual(other, delta)</Title>
      <Shortcut>gneqd</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>other</ID>
          <Default>other</Default>
        </Literal>
        <Literal>
          <ID>delta</ID>
          <Default>delta</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotEqual($other$, $delta$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().NotEqual(other, delta)</Title>
      <Shortcut>gxneqd</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>other</ID>
          <Default>other</Default>
        </Literal>
        <Literal>
          <ID>delta</ID>
          <Default>delta</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().NotEqual($other$, $delta$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotInfinity()</Title>
      <Shortcut>gninf</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotInfinity()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().NotInfinity()</Title>
      <Shortcut>gxninf</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().NotInfinity()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNaN()</Title>
      <Shortcut>gnnan</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNaN()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().NotNaN()</Title>
      <Shortcut>gxnnan</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().NotNaN()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNegativeInfinity()</Title>
      <Shortcut>gnneginf</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNegativeInfinity()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().NotNegativeInfinity()</Title>
      <Shortcut>gxnneginf</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().NotNegativeInfinity()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotPositiveInfinity()</Title>
      <Shortcut>gnposinf</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotPositiveInfinity()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().NotPositiveInfinity()</Title>
      <Shortcut>gxnposinf</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().NotPositiveInfinity()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.PositiveInfinity()</Title>
      <Shortcut>gposinf</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).PositiveInfinity()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().PositiveInfinity()</Title>
      <Shortcut>gxposinf</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().PositiveInfinity()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Defined()</Title>
      <Shortcut>gdef</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Defined()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Defined()</Title>
      <Shortcut>gxdef</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Defined()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.DoesNotHaveFlag(flag)</Title>
      <Shortcut>gnhf</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>flag</ID>
          <Default>flag</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).DoesNotHaveFlag($flag$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().DoesNotHaveFlag(flag)</Title>
      <Shortcut>gxnhf</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>flag</ID>
          <Default>flag</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().DoesNotHaveFlag($flag$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.HasFlag(flag)</Title>
      <Shortcut>ghf</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>flag</ID>
          <Default>flag</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).HasFlag($flag$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().HasFlag(flag)</Title>
      <Shortcut>gxhf</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>flag</ID>
          <Default>flag</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().HasFlag($flag$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Default()</Title>
      <Shortcut>gd</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Default()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Default()</Title>
      <Shortcut>gxd</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Default()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Equal(other)</Title>
      <Shortcut>geq</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>other</ID>
          <Default>other</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Equal($other$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Equal(other)</Title>
      <Shortcut>gxeq</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>other</ID>
          <Default>other</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Equal($other$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Equal(other, comparer)</Title>
      <Shortcut>geqc</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>other</ID>
          <Default>other</Default>
        </Literal>
        <Literal>
          <ID>comparer</ID>
          <Default>comparer</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Equal($other$, $comparer$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Equal(other, comparer)</Title>
      <Shortcut>gxeqc</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>other</ID>
          <Default>other</Default>
        </Literal>
        <Literal>
          <ID>comparer</ID>
          <Default>comparer</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Equal($other$, $comparer$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotDefault()</Title>
      <Shortcut>gnd</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotDefault()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().NotDefault()</Title>
      <Shortcut>gxnd</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().NotDefault()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotEqual(other)</Title>
      <Shortcut>gneq</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>other</ID>
          <Default>other</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotEqual($other$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().NotEqual(other)</Title>
      <Shortcut>gxneq</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>other</ID>
          <Default>other</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().NotEqual($other$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotEqual(other, comparer)</Title>
      <Shortcut>gneqc</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>other</ID>
          <Default>other</Default>
        </Literal>
        <Literal>
          <ID>comparer</ID>
          <Default>comparer</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotEqual($other$, $comparer$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().NotEqual(other, comparer)</Title>
      <Shortcut>gxneqc</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>other</ID>
          <Default>other</Default>
        </Literal>
        <Literal>
          <ID>comparer</ID>
          <Default>comparer</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().NotEqual($other$, $comparer$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotSame(other)</Title>
      <Shortcut>gns</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>other</ID>
          <Default>other</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotSame($other$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().NotSame(other)</Title>
      <Shortcut>gxns</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>other</ID>
          <Default>other</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().NotSame($other$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Same(other)</Title>
      <Shortcut>gs</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>other</ID>
          <Default>other</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Same($other$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Same(other)</Title>
      <Shortcut>gxs</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>other</ID>
          <Default>other</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Same($other$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Argument`1(value, name, secure)</Title>
      <Shortcut>ga</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>T</ID>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <Default>value</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <Default>name</Default>
        </Literal>
        <Literal>
          <ID>secure</ID>
          <Default>secure</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$))$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Member(member, validation)</Title>
      <Shortcut>gmem</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>member</ID>
          <Default>member</Default>
        </Literal>
        <Literal>
          <ID>validation</ID>
          <Default>validation</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Member($member$, $validation$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Member(member, validation)</Title>
      <Shortcut>gxmem</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>member</ID>
          <Default>member</Default>
        </Literal>
        <Literal>
          <ID>validation</ID>
          <Default>validation</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Member($member$, $validation$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Member(member, validation, validatesRange)</Title>
      <Shortcut>gmemr</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>member</ID>
          <Default>member</Default>
        </Literal>
        <Literal>
          <ID>validation</ID>
          <Default>validation</Default>
        </Literal>
        <Literal>
          <ID>validatesRange</ID>
          <Default>validatesRange</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Member($member$, $validation$, $validatesRange$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Member(member, validation, validatesRange)</Title>
      <Shortcut>gxmemr</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>member</ID>
          <Default>member</Default>
        </Literal>
        <Literal>
          <ID>validation</ID>
          <Default>validation</Default>
        </Literal>
        <Literal>
          <ID>validatesRange</ID>
          <Default>validatesRange</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Member($member$, $validation$, $validatesRange$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Clone()</Title>
      <Shortcut>gclone</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Clone()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Clone()</Title>
      <Shortcut>gxclone</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Clone()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Modify(value)</Title>
      <Shortcut>gmod</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Modify($value$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Modify(value)</Title>
      <Shortcut>gxmod</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Modify($value$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Wrap(convert)</Title>
      <Shortcut>gwrap</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>convert</ID>
          <Default>convert</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Wrap($convert$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Wrap(convert)</Title>
      <Shortcut>gxwrap</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>convert</ID>
          <Default>convert</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Wrap($convert$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull()</Title>
      <Shortcut>gnn</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Null()</Title>
      <Shortcut>gn</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Null()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>ArgumentInfo`1.Require(condition)</Title>
      <Shortcut>greq</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>condition</ID>
          <Default>condition</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Require($condition$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>ArgumentInfo`1.NotNull().Require(condition)</Title>
      <Shortcut>gxreq</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>condition</ID>
          <Default>condition</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Require($condition$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>ArgumentInfo`1.Require`1(condition)</Title>
      <Shortcut>greqe</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>TException</ID>
          <Default>TException</Default>
        </Literal>
        <Literal>
          <ID>condition</ID>
          <Default>condition</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Require<$TException$>($condition$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>ArgumentInfo`1.NotNull().Require`1(condition)</Title>
      <Shortcut>gxreqe</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>TException</ID>
          <Default>TException</Default>
        </Literal>
        <Literal>
          <ID>condition</ID>
          <Default>condition</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Require<$TException$>($condition$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Disposal(disposed, objectName)</Title>
      <Shortcut>gdis</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>disposed</ID>
          <Default>disposed</Default>
        </Literal>
        <Literal>
          <ID>objectName</ID>
          <Default>objectName</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Disposal($disposed$, $objectName$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Operation(valid)</Title>
      <Shortcut>gop</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>valid</ID>
          <Default>valid</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Operation($valid$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Support(supported)</Title>
      <Shortcut>gsup</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>supported</ID>
          <Default>supported</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Support($supported$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.DoesNotEndWith(value)</Title>
      <Shortcut>gnend</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).DoesNotEndWith($value$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().DoesNotEndWith(value)</Title>
      <Shortcut>gxnend</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().DoesNotEndWith($value$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.DoesNotEndWith(value, comparison)</Title>
      <Shortcut>gnends</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <Default>value</Default>
        </Literal>
        <Literal>
          <ID>comparison</ID>
          <Default>comparison</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).DoesNotEndWith($value$, StringComparison.$comparison$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().DoesNotEndWith(value, comparison)</Title>
      <Shortcut>gxnends</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <Default>value</Default>
        </Literal>
        <Literal>
          <ID>comparison</ID>
          <Default>comparison</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().DoesNotEndWith($value$, StringComparison.$comparison$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.DoesNotMatch(pattern)</Title>
      <Shortcut>gnm</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>pattern</ID>
          <Default>pattern</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).DoesNotMatch($pattern$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().DoesNotMatch(pattern)</Title>
      <Shortcut>gxnm</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>pattern</ID>
          <Default>pattern</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().DoesNotMatch($pattern$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.DoesNotMatch(pattern, matchTimeout)</Title>
      <Shortcut>gnmt</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>pattern</ID>
          <Default>pattern</Default>
        </Literal>
        <Literal>
          <ID>matchTimeout</ID>
          <Default>matchTimeout</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).DoesNotMatch($pattern$, $matchTimeout$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().DoesNotMatch(pattern, matchTimeout)</Title>
      <Shortcut>gxnmt</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>pattern</ID>
          <Default>pattern</Default>
        </Literal>
        <Literal>
          <ID>matchTimeout</ID>
          <Default>matchTimeout</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().DoesNotMatch($pattern$, $matchTimeout$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.DoesNotStartWith(value)</Title>
      <Shortcut>gnstart</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).DoesNotStartWith($value$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().DoesNotStartWith(value)</Title>
      <Shortcut>gxnstart</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().DoesNotStartWith($value$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.DoesNotStartWith(value, comparison)</Title>
      <Shortcut>gnstarts</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <Default>value</Default>
        </Literal>
        <Literal>
          <ID>comparison</ID>
          <Default>comparison</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).DoesNotStartWith($value$, StringComparison.$comparison$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().DoesNotStartWith(value, comparison)</Title>
      <Shortcut>gxnstarts</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <Default>value</Default>
        </Literal>
        <Literal>
          <ID>comparison</ID>
          <Default>comparison</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().DoesNotStartWith($value$, StringComparison.$comparison$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.EndsWith(value)</Title>
      <Shortcut>gend</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).EndsWith($value$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().EndsWith(value)</Title>
      <Shortcut>gxend</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().EndsWith($value$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.EndsWith(value, comparison)</Title>
      <Shortcut>gends</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <Default>value</Default>
        </Literal>
        <Literal>
          <ID>comparison</ID>
          <Default>comparison</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).EndsWith($value$, StringComparison.$comparison$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().EndsWith(value, comparison)</Title>
      <Shortcut>gxends</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <Default>value</Default>
        </Literal>
        <Literal>
          <ID>comparison</ID>
          <Default>comparison</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().EndsWith($value$, StringComparison.$comparison$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Equal(other, comparison)</Title>
      <Shortcut>geqs</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>other</ID>
          <Default>other</Default>
        </Literal>
        <Literal>
          <ID>comparison</ID>
          <Default>comparison</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Equal($other$, StringComparison.$comparison$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Equal(other, comparison)</Title>
      <Shortcut>gxeqs</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>other</ID>
          <Default>other</Default>
        </Literal>
        <Literal>
          <ID>comparison</ID>
          <Default>comparison</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Equal($other$, StringComparison.$comparison$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Length(length)</Title>
      <Shortcut>gl</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>length</ID>
          <Default>length</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Length($length$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Length(length)</Title>
      <Shortcut>gxl</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>length</ID>
          <Default>length</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Length($length$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.LengthInRange(minLength, maxLength)</Title>
      <Shortcut>glr</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>minLength</ID>
          <Default>minLength</Default>
        </Literal>
        <Literal>
          <ID>maxLength</ID>
          <Default>maxLength</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).LengthInRange($minLength$, $maxLength$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().LengthInRange(minLength, maxLength)</Title>
      <Shortcut>gxlr</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>minLength</ID>
          <Default>minLength</Default>
        </Literal>
        <Literal>
          <ID>maxLength</ID>
          <Default>maxLength</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().LengthInRange($minLength$, $maxLength$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Matches(pattern)</Title>
      <Shortcut>gm</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>pattern</ID>
          <Default>pattern</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Matches($pattern$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Matches(pattern)</Title>
      <Shortcut>gxm</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>pattern</ID>
          <Default>pattern</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Matches($pattern$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Matches(pattern, matchTimeout)</Title>
      <Shortcut>gmt</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>pattern</ID>
          <Default>pattern</Default>
        </Literal>
        <Literal>
          <ID>matchTimeout</ID>
          <Default>matchTimeout</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Matches($pattern$, $matchTimeout$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Matches(pattern, matchTimeout)</Title>
      <Shortcut>gxmt</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>pattern</ID>
          <Default>pattern</Default>
        </Literal>
        <Literal>
          <ID>matchTimeout</ID>
          <Default>matchTimeout</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Matches($pattern$, $matchTimeout$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.MaxLength(maxLength)</Title>
      <Shortcut>gmaxl</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>maxLength</ID>
          <Default>maxLength</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).MaxLength($maxLength$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().MaxLength(maxLength)</Title>
      <Shortcut>gxmaxl</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>maxLength</ID>
          <Default>maxLength</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().MaxLength($maxLength$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.MinLength(minLength)</Title>
      <Shortcut>gminl</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>minLength</ID>
          <Default>minLength</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).MinLength($minLength$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().MinLength(minLength)</Title>
      <Shortcut>gxminl</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>minLength</ID>
          <Default>minLength</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().MinLength($minLength$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotEqual(other, comparison)</Title>
      <Shortcut>gneqs</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>other</ID>
          <Default>other</Default>
        </Literal>
        <Literal>
          <ID>comparison</ID>
          <Default>comparison</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotEqual($other$, StringComparison.$comparison$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().NotEqual(other, comparison)</Title>
      <Shortcut>gxneqs</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>other</ID>
          <Default>other</Default>
        </Literal>
        <Literal>
          <ID>comparison</ID>
          <Default>comparison</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().NotEqual($other$, StringComparison.$comparison$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotLength(length)</Title>
      <Shortcut>gnl</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>length</ID>
          <Default>length</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotLength($length$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().NotLength(length)</Title>
      <Shortcut>gxnl</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>length</ID>
          <Default>length</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().NotLength($length$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotWhiteSpace()</Title>
      <Shortcut>gnw</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotWhiteSpace()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().NotWhiteSpace()</Title>
      <Shortcut>gxnw</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().NotWhiteSpace()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.StartsWith(value)</Title>
      <Shortcut>gstart</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).StartsWith($value$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().StartsWith(value)</Title>
      <Shortcut>gxstart</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().StartsWith($value$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.StartsWith(value, comparison)</Title>
      <Shortcut>gstarts</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <Default>value</Default>
        </Literal>
        <Literal>
          <ID>comparison</ID>
          <Default>comparison</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).StartsWith($value$, StringComparison.$comparison$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().StartsWith(value, comparison)</Title>
      <Shortcut>gxstarts</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <Default>value</Default>
        </Literal>
        <Literal>
          <ID>comparison</ID>
          <Default>comparison</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().StartsWith($value$, StringComparison.$comparison$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.WhiteSpace()</Title>
      <Shortcut>gw</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).WhiteSpace()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().WhiteSpace()</Title>
      <Shortcut>gxw</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().WhiteSpace()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>ArgumentInfo`1.Cast`1()</Title>
      <Shortcut>gcast</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>TTarget</ID>
          <Default>TTarget</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Cast<$TTarget$>()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>ArgumentInfo`1.NotNull().Cast`1()</Title>
      <Shortcut>gxcast</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>TTarget</ID>
          <Default>TTarget</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Cast<$TTarget$>()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>ArgumentInfo`1.Compatible`1()</Title>
      <Shortcut>gcomp</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>TTarget</ID>
          <Default>TTarget</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Compatible<$TTarget$>()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>ArgumentInfo`1.NotNull().Compatible`1()</Title>
      <Shortcut>gxcomp</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>TTarget</ID>
          <Default>TTarget</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Compatible<$TTarget$>()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>ArgumentInfo`1.NotCompatible`1()</Title>
      <Shortcut>gncomp</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>TTarget</ID>
          <Default>TTarget</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotCompatible<$TTarget$>()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>ArgumentInfo`1.NotNull().NotCompatible`1()</Title>
      <Shortcut>gxncomp</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>TTarget</ID>
          <Default>TTarget</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().NotCompatible<$TTarget$>()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Absolute()</Title>
      <Shortcut>gabs</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Absolute()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Absolute()</Title>
      <Shortcut>gxabs</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Absolute()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Http()</Title>
      <Shortcut>ghttp</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Http()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Http()</Title>
      <Shortcut>gxhttp</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Http()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Https()</Title>
      <Shortcut>ghttps</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Https()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Https()</Title>
      <Shortcut>gxhttps</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Https()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotScheme(scheme)</Title>
      <Shortcut>gnsch</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>scheme</ID>
          <Default>scheme</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotScheme($scheme$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().NotScheme(scheme)</Title>
      <Shortcut>gxnsch</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>scheme</ID>
          <Default>scheme</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().NotScheme($scheme$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Relative()</Title>
      <Shortcut>grel</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Relative()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Relative()</Title>
      <Shortcut>gxrel</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Relative()$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.Scheme(scheme)</Title>
      <Shortcut>gsch</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>scheme</ID>
          <Default>scheme</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).Scheme($scheme$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Guard.NotNull().Scheme(scheme)</Title>
      <Shortcut>gxsch</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Dawn</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arg</ID>
          <Default>arg</Default>
        </Literal>
        <Literal>
          <ID>scheme</ID>
          <Default>scheme</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[Guard.Argument($arg$, nameof($arg$)).NotNull().Scheme($scheme$)$end$;]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>